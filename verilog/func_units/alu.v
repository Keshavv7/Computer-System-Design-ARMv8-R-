/* Generated by Yosys 0.45+11 (git sha1 e8951aba29faf774e475f20c1405162993235d7f, g++ 14.2.1 -O2 -fexceptions -fstack-protector-strong -m64 -march=x86-64 -mtune=generic -fasynchronous-unwind-tables -fstack-clash-protection -fcf-protection -mtls-dialect=gnu2 -fno-omit-frame-pointer -mno-omit-leaf-frame-pointer -fPIC -O3) */

(* top =  1  *)
(* generator = "Amaranth" *)
module top(b, alu_ctrl, \alu_ctrl$3 , nzc, o, a);
  reg \$auto$verilog_backend.cc:2352:dump_module$1  = 0;
  wire [32:0] \$1 ;
  wire [1:0] \$10 ;
  wire [10:0] \$11 ;
  wire [63:0] \$12 ;
  wire [63:0] \$13 ;
  wire \$14 ;
  wire [32:0] \$15 ;
  wire [31:0] \$16 ;
  wire [31:0] \$17 ;
  wire [31:0] \$18 ;
  wire [62:0] \$19 ;
  wire [32:0] \$2 ;
  wire [63:0] \$20 ;
  wire \$21 ;
  wire [31:0] \$22 ;
  wire [32:0] \$3 ;
  wire [32:0] \$37 ;
  wire \$39 ;
  wire [32:0] \$4 ;
  wire [32:0] \$5 ;
  wire \$6 ;
  wire [2:0] \$7 ;
  wire [7:0] \$8 ;
  wire [32:0] \$9 ;
  input [31:0] a;
  wire [31:0] a;
  input [5:0] alu_ctrl;
  wire [5:0] alu_ctrl;
  output [5:0] \alu_ctrl$3 ;
  wire [5:0] \alu_ctrl$3 ;
  input [31:0] b;
  wire [31:0] b;
  output [2:0] nzc;
  reg [2:0] nzc;
  output [31:0] o;
  reg [31:0] o;
  assign \$1  = $signed(a) + $signed(b);
  assign \$2  = $signed(a) + $signed(b);
  assign \$3  = $signed(a) - $signed(b);
  assign \$4  = $signed(a) - $signed(b);
  assign \$5  = $signed(a) - $signed(b);
  assign \$6  = ! \$5 ;
  assign \$7  = 2'h2 + \$6 ;
  assign \$8  = \$4 [31] << \$7 ;
  assign \$9  = $signed(a) - $signed(b);
  assign \$10  = 1'h1 + \$9 [32];
  assign \$11  = \$8  << \$10 ;
  assign \$12  = $signed(a) * $signed(b);
  assign \$13  = $signed(a) * $signed(b);
  assign \$14  = $signed(\$13 ) > $signed(33'h0ffffffff);
  wire [33:0] _0_, _1_, _2_;
  assign _0_ = $signed(a);
  assign _1_ = $signed(b);
  assign _2_ = (a[31] == b[31]) || a == 0 ? _0_ : $signed(_0_ - (b[31] ? _1_ + 1 : _1_ - 1));
  assign \$37  = $signed(_2_) / $signed(_1_);
  assign \$39  = | b;
  assign \$15  = \$39  ? \$37  : 33'h000000000;
  assign \$16  = a & b;
  assign \$17  = a | b;
  assign \$18  = a ^ b;
  assign \$19  = $signed(a) << b[4:0];
  assign \$20  = $signed(a) * $signed(b);
  assign \$21  = $signed(\$20 ) > $signed(33'h0ffffffff);
  assign \$22  = $signed(a) >>> b[4:0];
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    o = 32'd0;
    casez (alu_ctrl)
      6'h00:
          o = \$1 [31:0];
      6'h01:
          o = \$3 [31:0];
      6'h02:
          o = \$12 [31:0];
      6'h03:
          o = \$15 [31:0];
      6'h04:
          o = \$16 ;
      6'h05:
          o = \$17 ;
      6'h06:
          o = \$18 ;
      6'h07:
          o = \$19 [31:0];
      6'h08:
          o = \$22 ;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    nzc = 3'h0;
    casez (alu_ctrl)
      6'h00:
          nzc[2] = \$2 [32];
      6'h01:
          nzc = \$11 [2:0];
      6'h02:
          nzc[2] = \$14 ;
      6'h03:
          nzc = 3'h0;
      6'h04:
          nzc = 3'h0;
      6'h05:
          nzc = 3'h0;
      6'h06:
          nzc = 3'h0;
      6'h07:
          nzc[2] = \$21 ;
      6'h08:
          nzc = 3'h0;
    endcase
  end
  assign \alu_ctrl$3  = alu_ctrl;
endmodule


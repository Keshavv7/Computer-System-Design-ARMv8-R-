/* Generated by Yosys 0.45+11 (git sha1 e8951aba29faf774e475f20c1405162993235d7f, g++ 14.2.1 -O2 -fexceptions -fstack-protector-strong -m64 -march=x86-64 -mtune=generic -fasynchronous-unwind-tables -fstack-clash-protection -fcf-protection -mtls-dialect=gnu2 -fno-omit-frame-pointer -mno-omit-leaf-frame-pointer -fPIC -O3) */

(* top =  1  *)
(* generator = "Amaranth" *)
module top(DReadLine, clk, rst, PCLine, DWriteLine, DWEnable, DAddr, Instruction);
  reg \$auto$verilog_backend.cc:2352:dump_module$1  = 0;
  wire \$1 ;
  wire [32:0] \$2 ;
  wire \$3 ;
  wire \$4 ;
  wire [32:0] \$5 ;
  reg [31:0] \$6 ;
  reg [31:0] \$7 ;
  reg [2:0] \$8 ;
  reg [31:0] \$9 ;
  reg [2:0] CPSR = 3'h0;
  wire [2:0] \CPSR$12 ;
  output [31:0] DAddr;
  wire [31:0] DAddr;
  input [31:0] DReadLine;
  wire [31:0] DReadLine;
  output DWEnable;
  wire DWEnable;
  output [31:0] DWriteLine;
  reg [31:0] DWriteLine;
  input [31:0] Instruction;
  wire [31:0] Instruction;
  reg [31:0] PC = 32'd0;
  reg [31:0] PCIn = 32'd0;
  output [31:0] PCLine;
  reg [31:0] PCLine = 32'd0;
  wire [31:0] PCOut;
  reg [31:0] a;
  reg [5:0] alu_ctrl;
  reg [31:0] b;
  input clk;
  wire clk;
  wire [31:0] instruction;
  wire is_imm;
  wire [1:0] itype;
  wire [31:0] o;
  wire [3:0] rd_addr;
  reg [3:0] read_addr1;
  reg [3:0] read_addr2;
  wire [31:0] read_data1;
  wire [31:0] read_data2;
  wire [3:0] rm_addr;
  input rst;
  wire rst;
  reg [31:0] rval;
  reg [31:0] rval2;
  wire [5:0] u_ctrl;
  wire [5:0] \u_ctrl$28 ;
  wire [14:0] value;
  reg [3:0] write_addr;
  wire [31:0] write_data;
  reg [31:0] \write_data$33 ;
  assign \$2  = PC + 3'h4;
  assign \$3  = Instruction[31:30] == 1'h1;
  assign \$4  = ! Instruction[29:24];
  assign \$5  = \$4  ? { 1'h0, PC } : { o[31], o };
  always @(posedge clk)
    PC <= \$6 ;
  always @(posedge clk)
    PCIn <= \$7 ;
  always @(posedge clk)
    CPSR <= \$8 ;
  always @(posedge clk)
    PCLine <= \$9 ;
  \top.alu  alu (
    .a(a),
    .alu_ctrl(alu_ctrl),
    .b(b),
    .o(o)
  );
  \top.pcc  pcc (
    .CPSR(CPSR),
    .PCIn(PCIn),
    .PCOut(PCOut)
  );
  \top.rf  rf (
    .clk(clk),
    .read_addr1(read_addr1),
    .read_addr2(read_addr2),
    .read_data1(read_data1),
    .read_data2(read_data2),
    .rst(rst),
    .write_addr(write_addr),
    .write_data(\write_data$33 )
  );
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$6  = PCOut;
    if (rst) begin
      \$6  = 32'd0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$7  = PC;
    if (rst) begin
      \$7  = 32'd0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$8  = 3'h0;
    if (rst) begin
      \$8  = 3'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$9  = PCOut;
    if (rst) begin
      \$9  = 32'd0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    read_addr1 = 4'h0;
    if (\$3 ) begin
      read_addr1 = Instruction[19:16];
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    rval = 32'd0;
    if (\$3 ) begin
      rval = read_data1;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    rval2 = 32'd0;
    if (\$3 ) begin
      (* full_case = 32'd1 *)
      if (Instruction[15]) begin
        rval2 = { 17'h00000, Instruction[14:0] };
      end else begin
        rval2 = read_data2;
      end
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    read_addr2 = 4'h0;
    if (\$3 ) begin
      (* full_case = 32'd1 *)
      if (Instruction[15]) begin
      end else begin
        read_addr2 = Instruction[3:0];
      end
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    a = 32'd0;
    if (\$3 ) begin
      a = rval;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    b = 32'd0;
    if (\$3 ) begin
      b = rval2;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    alu_ctrl = 6'h00;
    if (\$3 ) begin
      alu_ctrl = Instruction[29:24];
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    DWriteLine = 32'd0;
    if (\$3 ) begin
      DWriteLine = \$5 [31:0];
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    write_addr = 4'h0;
    if (\$3 ) begin
      write_addr = Instruction[23:20];
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \write_data$33  = 32'd0;
    if (\$3 ) begin
      \write_data$33  = DWriteLine;
    end
  end
  assign u_ctrl = 6'h00;
  assign \CPSR$12  = 3'h0;
  assign instruction = Instruction;
  assign itype = Instruction[31:30];
  assign rm_addr = Instruction[19:16];
  assign is_imm = Instruction[15];
  assign value = Instruction[14:0];
  assign \u_ctrl$28  = Instruction[29:24];
  assign write_data = DWriteLine;
  assign rd_addr = Instruction[23:20];
  assign DWEnable = 1'h1;
  assign DAddr = { 28'h0000000, write_addr };
  assign \$1  = 1'h1;
endmodule

(* generator = "Amaranth" *)
module \top.alu (b, alu_ctrl, o, a);
  reg \$auto$verilog_backend.cc:2352:dump_module$2  = 0;
  wire [32:0] \$1 ;
  wire [1:0] \$10 ;
  wire [10:0] \$11 ;
  wire [63:0] \$12 ;
  wire [63:0] \$13 ;
  wire \$14 ;
  wire [32:0] \$15 ;
  wire [31:0] \$16 ;
  wire [31:0] \$17 ;
  wire [31:0] \$18 ;
  wire [62:0] \$19 ;
  wire [32:0] \$2 ;
  wire [63:0] \$20 ;
  wire \$21 ;
  wire [31:0] \$22 ;
  wire [32:0] \$3 ;
  wire [32:0] \$37 ;
  wire \$39 ;
  wire [32:0] \$4 ;
  wire [32:0] \$5 ;
  wire \$6 ;
  wire [2:0] \$7 ;
  wire [7:0] \$8 ;
  wire [32:0] \$9 ;
  input [31:0] a;
  wire [31:0] a;
  input [5:0] alu_ctrl;
  wire [5:0] alu_ctrl;
  input [31:0] b;
  wire [31:0] b;
  reg [2:0] nzc;
  output [31:0] o;
  reg [31:0] o;
  assign \$1  = $signed(a) + $signed(b);
  assign \$2  = $signed(a) + $signed(b);
  assign \$3  = $signed(a) - $signed(b);
  assign \$4  = $signed(a) - $signed(b);
  assign \$5  = $signed(a) - $signed(b);
  assign \$6  = ! \$5 ;
  assign \$7  = 2'h2 + \$6 ;
  assign \$8  = \$4 [31] << \$7 ;
  assign \$9  = $signed(a) - $signed(b);
  assign \$10  = 1'h1 + \$9 [32];
  assign \$11  = \$8  << \$10 ;
  assign \$12  = $signed(a) * $signed(b);
  assign \$13  = $signed(a) * $signed(b);
  assign \$14  = $signed(\$13 ) > $signed(33'h0ffffffff);
  wire [33:0] _0_, _1_, _2_;
  assign _0_ = $signed(a);
  assign _1_ = $signed(b);
  assign _2_ = (a[31] == b[31]) || a == 0 ? _0_ : $signed(_0_ - (b[31] ? _1_ + 1 : _1_ - 1));
  assign \$37  = $signed(_2_) / $signed(_1_);
  assign \$39  = | b;
  assign \$15  = \$39  ? \$37  : 33'h000000000;
  assign \$16  = a & b;
  assign \$17  = a | b;
  assign \$18  = a ^ b;
  assign \$19  = $signed(a) << b[4:0];
  assign \$20  = $signed(a) * $signed(b);
  assign \$21  = $signed(\$20 ) > $signed(33'h0ffffffff);
  assign \$22  = $signed(a) >>> b[4:0];
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$2 ) begin end
    o = 32'd0;
    casez (alu_ctrl)
      6'h00:
          o = \$1 [31:0];
      6'h01:
          o = \$3 [31:0];
      6'h02:
          o = \$12 [31:0];
      6'h03:
          o = \$15 [31:0];
      6'h04:
          o = \$16 ;
      6'h05:
          o = \$17 ;
      6'h06:
          o = \$18 ;
      6'h07:
          o = \$19 [31:0];
      6'h08:
          o = \$22 ;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$2 ) begin end
    nzc = 3'h0;
    casez (alu_ctrl)
      6'h00:
          nzc[2] = \$2 [32];
      6'h01:
          nzc = \$11 [2:0];
      6'h02:
          nzc[2] = \$14 ;
      6'h03:
          nzc = 3'h0;
      6'h04:
          nzc = 3'h0;
      6'h05:
          nzc = 3'h0;
      6'h06:
          nzc = 3'h0;
      6'h07:
          nzc[2] = \$21 ;
      6'h08:
          nzc = 3'h0;
    endcase
  end
endmodule

(* generator = "Amaranth" *)
module \top.pcc (CPSR, PCOut, PCIn);
  wire [32:0] \$1 ;
  wire \$2 ;
  wire \$3 ;
  wire \$4 ;
  wire \$5 ;
  wire \$6 ;
  wire \$7 ;
  wire \$8 ;
  input [2:0] CPSR;
  wire [2:0] CPSR;
  wire N;
  wire [31:0] PCDef;
  input [31:0] PCIn;
  wire [31:0] PCIn;
  output [31:0] PCOut;
  wire [31:0] PCOut;
  wire Z;
  wire [31:0] target;
  wire [5:0] u_ctrl;
  assign \$2  = ~ CPSR[2];
  assign \$3  = \$2  & CPSR[1];
  assign \$4  = ~ CPSR[1];
  assign \$5  = CPSR[2] & \$4 ;
  assign \$6  = ~ CPSR[2];
  assign \$7  = ~ CPSR[1];
  assign \$8  = \$6  & \$7 ;
  assign \$1  = PCIn + 3'h4;
  assign N = CPSR[2];
  assign Z = CPSR[1];
  assign PCDef = \$1 [31:0];
  assign u_ctrl = 6'h00;
  assign target = 32'd0;
  assign PCOut = \$1 [31:0];
endmodule

(* generator = "Amaranth" *)
module \top.rf (rst, read_addr1, read_addr2, write_addr, write_data, read_data1, read_data2, clk);
  reg \$auto$verilog_backend.cc:2352:dump_module$3  = 0;
  reg [31:0] \$1 ;
  reg [31:0] \$10 ;
  reg [31:0] \$11 ;
  reg [31:0] \$12 ;
  reg [31:0] \$13 ;
  reg [31:0] \$14 ;
  reg [31:0] \$15 ;
  reg [31:0] \$16 ;
  reg [31:0] \$17 ;
  reg [31:0] \$18 ;
  reg [31:0] \$19 ;
  reg [31:0] \$2 ;
  reg [31:0] \$20 ;
  reg [31:0] \$3 ;
  reg [31:0] \$4 ;
  reg [31:0] \$5 ;
  reg [31:0] \$6 ;
  reg [31:0] \$7 ;
  reg [31:0] \$8 ;
  reg [31:0] \$9 ;
  reg [31:0] \$signal  = 32'd0;
  reg [31:0] \$signal$10  = 32'd0;
  reg [31:0] \$signal$11  = 32'd0;
  reg [31:0] \$signal$12  = 32'd0;
  reg [31:0] \$signal$13  = 32'd0;
  reg [31:0] \$signal$14  = 32'd0;
  reg [31:0] \$signal$15  = 32'd0;
  reg [31:0] \$signal$16  = 32'd0;
  reg [31:0] \$signal$17  = 32'd0;
  reg [31:0] \$signal$18  = 32'd0;
  reg [31:0] \$signal$19  = 32'd0;
  reg [31:0] \$signal$5  = 32'd0;
  reg [31:0] \$signal$6  = 32'd0;
  reg [31:0] \$signal$7  = 32'd0;
  reg [31:0] \$signal$8  = 32'd0;
  reg [31:0] \$signal$9  = 32'd0;
  input clk;
  wire clk;
  input [3:0] read_addr1;
  wire [3:0] read_addr1;
  input [3:0] read_addr2;
  wire [3:0] read_addr2;
  output [31:0] read_data1;
  reg [31:0] read_data1 = 32'd0;
  output [31:0] read_data2;
  reg [31:0] read_data2 = 32'd0;
  input rst;
  wire rst;
  input [3:0] write_addr;
  wire [3:0] write_addr;
  input [31:0] write_data;
  wire [31:0] write_data;
  wire write_enable;
  always @(posedge clk)
    read_data1 <= \$3 ;
  always @(posedge clk)
    read_data2 <= \$4 ;
  always @(posedge clk)
    \$signal  <= \$5 ;
  always @(posedge clk)
    \$signal$5  <= \$6 ;
  always @(posedge clk)
    \$signal$6  <= \$7 ;
  always @(posedge clk)
    \$signal$7  <= \$8 ;
  always @(posedge clk)
    \$signal$8  <= \$9 ;
  always @(posedge clk)
    \$signal$9  <= \$10 ;
  always @(posedge clk)
    \$signal$10  <= \$11 ;
  always @(posedge clk)
    \$signal$11  <= \$12 ;
  always @(posedge clk)
    \$signal$12  <= \$13 ;
  always @(posedge clk)
    \$signal$13  <= \$14 ;
  always @(posedge clk)
    \$signal$14  <= \$15 ;
  always @(posedge clk)
    \$signal$15  <= \$16 ;
  always @(posedge clk)
    \$signal$16  <= \$17 ;
  always @(posedge clk)
    \$signal$17  <= \$18 ;
  always @(posedge clk)
    \$signal$18  <= \$19 ;
  always @(posedge clk)
    \$signal$19  <= \$20 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$3 ) begin end
    (* full_case = 32'd1 *)
    casez (read_addr1)
      4'h0:
          \$1  = \$signal ;
      4'h1:
          \$1  = \$signal$5 ;
      4'h2:
          \$1  = \$signal$6 ;
      4'h3:
          \$1  = \$signal$7 ;
      4'h4:
          \$1  = \$signal$8 ;
      4'h5:
          \$1  = \$signal$9 ;
      4'h6:
          \$1  = \$signal$10 ;
      4'h7:
          \$1  = \$signal$11 ;
      4'h8:
          \$1  = \$signal$12 ;
      4'h9:
          \$1  = \$signal$13 ;
      4'ha:
          \$1  = \$signal$14 ;
      4'hb:
          \$1  = \$signal$15 ;
      4'hc:
          \$1  = \$signal$16 ;
      4'hd:
          \$1  = \$signal$17 ;
      4'he:
          \$1  = \$signal$18 ;
      4'hf:
          \$1  = \$signal$19 ;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$3 ) begin end
    (* full_case = 32'd1 *)
    casez (read_addr2)
      4'h0:
          \$2  = \$signal ;
      4'h1:
          \$2  = \$signal$5 ;
      4'h2:
          \$2  = \$signal$6 ;
      4'h3:
          \$2  = \$signal$7 ;
      4'h4:
          \$2  = \$signal$8 ;
      4'h5:
          \$2  = \$signal$9 ;
      4'h6:
          \$2  = \$signal$10 ;
      4'h7:
          \$2  = \$signal$11 ;
      4'h8:
          \$2  = \$signal$12 ;
      4'h9:
          \$2  = \$signal$13 ;
      4'ha:
          \$2  = \$signal$14 ;
      4'hb:
          \$2  = \$signal$15 ;
      4'hc:
          \$2  = \$signal$16 ;
      4'hd:
          \$2  = \$signal$17 ;
      4'he:
          \$2  = \$signal$18 ;
      4'hf:
          \$2  = \$signal$19 ;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$3 ) begin end
    \$3  = \$1 ;
    if (rst) begin
      \$3  = 32'd0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$3 ) begin end
    \$4  = \$2 ;
    if (rst) begin
      \$4  = 32'd0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$3 ) begin end
    \$5  = \$signal ;
    if (rst) begin
      \$5  = 32'd0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$3 ) begin end
    \$6  = \$signal$5 ;
    if (rst) begin
      \$6  = 32'd0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$3 ) begin end
    \$7  = \$signal$6 ;
    if (rst) begin
      \$7  = 32'd0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$3 ) begin end
    \$8  = \$signal$7 ;
    if (rst) begin
      \$8  = 32'd0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$3 ) begin end
    \$9  = \$signal$8 ;
    if (rst) begin
      \$9  = 32'd0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$3 ) begin end
    \$10  = \$signal$9 ;
    if (rst) begin
      \$10  = 32'd0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$3 ) begin end
    \$11  = \$signal$10 ;
    if (rst) begin
      \$11  = 32'd0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$3 ) begin end
    \$12  = \$signal$11 ;
    if (rst) begin
      \$12  = 32'd0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$3 ) begin end
    \$13  = \$signal$12 ;
    if (rst) begin
      \$13  = 32'd0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$3 ) begin end
    \$14  = \$signal$13 ;
    if (rst) begin
      \$14  = 32'd0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$3 ) begin end
    \$15  = \$signal$14 ;
    if (rst) begin
      \$15  = 32'd0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$3 ) begin end
    \$16  = \$signal$15 ;
    if (rst) begin
      \$16  = 32'd0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$3 ) begin end
    \$17  = \$signal$16 ;
    if (rst) begin
      \$17  = 32'd0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$3 ) begin end
    \$18  = \$signal$17 ;
    if (rst) begin
      \$18  = 32'd0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$3 ) begin end
    \$19  = \$signal$18 ;
    if (rst) begin
      \$19  = 32'd0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$3 ) begin end
    \$20  = \$signal$19 ;
    if (rst) begin
      \$20  = 32'd0;
    end
  end
  assign write_enable = 1'h0;
endmodule


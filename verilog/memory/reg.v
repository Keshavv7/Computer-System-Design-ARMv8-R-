/* Generated by Yosys 0.45+11 (git sha1 e8951aba29faf774e475f20c1405162993235d7f, g++ 14.2.1 -O2 -fexceptions -fstack-protector-strong -m64 -march=x86-64 -mtune=generic -fasynchronous-unwind-tables -fstack-clash-protection -fcf-protection -mtls-dialect=gnu2 -fno-omit-frame-pointer -mno-omit-leaf-frame-pointer -fPIC -O3) */

(* top =  1  *)
(* generator = "Amaranth" *)
module top(read_addr2, write_addr, write_data, write_enable, clk, rst, read_data1, read_data2, read_addr1);
  reg \$auto$verilog_backend.cc:2352:dump_module$1  = 0;
  reg [31:0] \$1 ;
  reg [31:0] \$10 ;
  reg [31:0] \$11 ;
  reg [31:0] \$12 ;
  reg [31:0] \$13 ;
  reg [31:0] \$14 ;
  reg [31:0] \$15 ;
  reg [31:0] \$16 ;
  reg [31:0] \$17 ;
  reg [31:0] \$18 ;
  reg [31:0] \$19 ;
  reg [31:0] \$2 ;
  reg [31:0] \$20 ;
  reg [31:0] \$3 ;
  reg [31:0] \$4 ;
  reg [31:0] \$5 ;
  reg [31:0] \$6 ;
  reg [31:0] \$7 ;
  reg [31:0] \$8 ;
  reg [31:0] \$9 ;
  reg [31:0] \$signal  = 32'd0;
  reg [31:0] \$signal$10  = 32'd0;
  reg [31:0] \$signal$11  = 32'd0;
  reg [31:0] \$signal$12  = 32'd0;
  reg [31:0] \$signal$13  = 32'd0;
  reg [31:0] \$signal$14  = 32'd0;
  reg [31:0] \$signal$15  = 32'd0;
  reg [31:0] \$signal$16  = 32'd0;
  reg [31:0] \$signal$17  = 32'd0;
  reg [31:0] \$signal$18  = 32'd0;
  reg [31:0] \$signal$19  = 32'd0;
  reg [31:0] \$signal$20  = 32'd0;
  reg [31:0] \$signal$21  = 32'd0;
  reg [31:0] \$signal$22  = 32'd0;
  reg [31:0] \$signal$23  = 32'd0;
  reg [31:0] \$signal$24  = 32'd0;
  input clk;
  wire clk;
  input [3:0] read_addr1;
  wire [3:0] read_addr1;
  input [3:0] read_addr2;
  wire [3:0] read_addr2;
  output [31:0] read_data1;
  reg [31:0] read_data1 = 32'd0;
  output [31:0] read_data2;
  reg [31:0] read_data2 = 32'd0;
  input rst;
  wire rst;
  input [3:0] write_addr;
  wire [3:0] write_addr;
  input [31:0] write_data;
  wire [31:0] write_data;
  input write_enable;
  wire write_enable;
  always @(posedge clk)
    read_data1 <= \$3 ;
  always @(posedge clk)
    read_data2 <= \$4 ;
  always @(posedge clk)
    \$signal  <= \$5 ;
  always @(posedge clk)
    \$signal$10  <= \$6 ;
  always @(posedge clk)
    \$signal$11  <= \$7 ;
  always @(posedge clk)
    \$signal$12  <= \$8 ;
  always @(posedge clk)
    \$signal$13  <= \$9 ;
  always @(posedge clk)
    \$signal$14  <= \$10 ;
  always @(posedge clk)
    \$signal$15  <= \$11 ;
  always @(posedge clk)
    \$signal$16  <= \$12 ;
  always @(posedge clk)
    \$signal$17  <= \$13 ;
  always @(posedge clk)
    \$signal$18  <= \$14 ;
  always @(posedge clk)
    \$signal$19  <= \$15 ;
  always @(posedge clk)
    \$signal$20  <= \$16 ;
  always @(posedge clk)
    \$signal$21  <= \$17 ;
  always @(posedge clk)
    \$signal$22  <= \$18 ;
  always @(posedge clk)
    \$signal$23  <= \$19 ;
  always @(posedge clk)
    \$signal$24  <= \$20 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    (* full_case = 32'd1 *)
    casez (read_addr1)
      4'h0:
          \$1  = \$signal ;
      4'h1:
          \$1  = \$signal$10 ;
      4'h2:
          \$1  = \$signal$11 ;
      4'h3:
          \$1  = \$signal$12 ;
      4'h4:
          \$1  = \$signal$13 ;
      4'h5:
          \$1  = \$signal$14 ;
      4'h6:
          \$1  = \$signal$15 ;
      4'h7:
          \$1  = \$signal$16 ;
      4'h8:
          \$1  = \$signal$17 ;
      4'h9:
          \$1  = \$signal$18 ;
      4'ha:
          \$1  = \$signal$19 ;
      4'hb:
          \$1  = \$signal$20 ;
      4'hc:
          \$1  = \$signal$21 ;
      4'hd:
          \$1  = \$signal$22 ;
      4'he:
          \$1  = \$signal$23 ;
      4'hf:
          \$1  = \$signal$24 ;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    (* full_case = 32'd1 *)
    casez (read_addr2)
      4'h0:
          \$2  = \$signal ;
      4'h1:
          \$2  = \$signal$10 ;
      4'h2:
          \$2  = \$signal$11 ;
      4'h3:
          \$2  = \$signal$12 ;
      4'h4:
          \$2  = \$signal$13 ;
      4'h5:
          \$2  = \$signal$14 ;
      4'h6:
          \$2  = \$signal$15 ;
      4'h7:
          \$2  = \$signal$16 ;
      4'h8:
          \$2  = \$signal$17 ;
      4'h9:
          \$2  = \$signal$18 ;
      4'ha:
          \$2  = \$signal$19 ;
      4'hb:
          \$2  = \$signal$20 ;
      4'hc:
          \$2  = \$signal$21 ;
      4'hd:
          \$2  = \$signal$22 ;
      4'he:
          \$2  = \$signal$23 ;
      4'hf:
          \$2  = \$signal$24 ;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$3  = \$1 ;
    if (rst) begin
      \$3  = 32'd0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$4  = \$2 ;
    if (rst) begin
      \$4  = 32'd0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$5  = \$signal ;
    if (write_enable) begin
      casez (write_addr)
        4'h0:
            \$5  = write_data;
      endcase
    end
    if (rst) begin
      \$5  = 32'd0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$6  = \$signal$10 ;
    if (write_enable) begin
      casez (write_addr)
        4'h0:
            /* empty */;
        4'h1:
            \$6  = write_data;
      endcase
    end
    if (rst) begin
      \$6  = 32'd0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$7  = \$signal$11 ;
    if (write_enable) begin
      casez (write_addr)
        4'h0:
            /* empty */;
        4'h1:
            /* empty */;
        4'h2:
            \$7  = write_data;
      endcase
    end
    if (rst) begin
      \$7  = 32'd0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$8  = \$signal$12 ;
    if (write_enable) begin
      casez (write_addr)
        4'h0:
            /* empty */;
        4'h1:
            /* empty */;
        4'h2:
            /* empty */;
        4'h3:
            \$8  = write_data;
      endcase
    end
    if (rst) begin
      \$8  = 32'd0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$9  = \$signal$13 ;
    if (write_enable) begin
      casez (write_addr)
        4'h0:
            /* empty */;
        4'h1:
            /* empty */;
        4'h2:
            /* empty */;
        4'h3:
            /* empty */;
        4'h4:
            \$9  = write_data;
      endcase
    end
    if (rst) begin
      \$9  = 32'd0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$10  = \$signal$14 ;
    if (write_enable) begin
      casez (write_addr)
        4'h0:
            /* empty */;
        4'h1:
            /* empty */;
        4'h2:
            /* empty */;
        4'h3:
            /* empty */;
        4'h4:
            /* empty */;
        4'h5:
            \$10  = write_data;
      endcase
    end
    if (rst) begin
      \$10  = 32'd0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$11  = \$signal$15 ;
    if (write_enable) begin
      casez (write_addr)
        4'h0:
            /* empty */;
        4'h1:
            /* empty */;
        4'h2:
            /* empty */;
        4'h3:
            /* empty */;
        4'h4:
            /* empty */;
        4'h5:
            /* empty */;
        4'h6:
            \$11  = write_data;
      endcase
    end
    if (rst) begin
      \$11  = 32'd0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$12  = \$signal$16 ;
    if (write_enable) begin
      casez (write_addr)
        4'h0:
            /* empty */;
        4'h1:
            /* empty */;
        4'h2:
            /* empty */;
        4'h3:
            /* empty */;
        4'h4:
            /* empty */;
        4'h5:
            /* empty */;
        4'h6:
            /* empty */;
        4'h7:
            \$12  = write_data;
      endcase
    end
    if (rst) begin
      \$12  = 32'd0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$13  = \$signal$17 ;
    if (write_enable) begin
      casez (write_addr)
        4'h0:
            /* empty */;
        4'h1:
            /* empty */;
        4'h2:
            /* empty */;
        4'h3:
            /* empty */;
        4'h4:
            /* empty */;
        4'h5:
            /* empty */;
        4'h6:
            /* empty */;
        4'h7:
            /* empty */;
        4'h8:
            \$13  = write_data;
      endcase
    end
    if (rst) begin
      \$13  = 32'd0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$14  = \$signal$18 ;
    if (write_enable) begin
      casez (write_addr)
        4'h0:
            /* empty */;
        4'h1:
            /* empty */;
        4'h2:
            /* empty */;
        4'h3:
            /* empty */;
        4'h4:
            /* empty */;
        4'h5:
            /* empty */;
        4'h6:
            /* empty */;
        4'h7:
            /* empty */;
        4'h8:
            /* empty */;
        4'h9:
            \$14  = write_data;
      endcase
    end
    if (rst) begin
      \$14  = 32'd0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$15  = \$signal$19 ;
    if (write_enable) begin
      casez (write_addr)
        4'h0:
            /* empty */;
        4'h1:
            /* empty */;
        4'h2:
            /* empty */;
        4'h3:
            /* empty */;
        4'h4:
            /* empty */;
        4'h5:
            /* empty */;
        4'h6:
            /* empty */;
        4'h7:
            /* empty */;
        4'h8:
            /* empty */;
        4'h9:
            /* empty */;
        4'ha:
            \$15  = write_data;
      endcase
    end
    if (rst) begin
      \$15  = 32'd0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$16  = \$signal$20 ;
    if (write_enable) begin
      casez (write_addr)
        4'h0:
            /* empty */;
        4'h1:
            /* empty */;
        4'h2:
            /* empty */;
        4'h3:
            /* empty */;
        4'h4:
            /* empty */;
        4'h5:
            /* empty */;
        4'h6:
            /* empty */;
        4'h7:
            /* empty */;
        4'h8:
            /* empty */;
        4'h9:
            /* empty */;
        4'ha:
            /* empty */;
        4'hb:
            \$16  = write_data;
      endcase
    end
    if (rst) begin
      \$16  = 32'd0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$17  = \$signal$21 ;
    if (write_enable) begin
      casez (write_addr)
        4'h0:
            /* empty */;
        4'h1:
            /* empty */;
        4'h2:
            /* empty */;
        4'h3:
            /* empty */;
        4'h4:
            /* empty */;
        4'h5:
            /* empty */;
        4'h6:
            /* empty */;
        4'h7:
            /* empty */;
        4'h8:
            /* empty */;
        4'h9:
            /* empty */;
        4'ha:
            /* empty */;
        4'hb:
            /* empty */;
        4'hc:
            \$17  = write_data;
      endcase
    end
    if (rst) begin
      \$17  = 32'd0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$18  = \$signal$22 ;
    if (write_enable) begin
      casez (write_addr)
        4'h0:
            /* empty */;
        4'h1:
            /* empty */;
        4'h2:
            /* empty */;
        4'h3:
            /* empty */;
        4'h4:
            /* empty */;
        4'h5:
            /* empty */;
        4'h6:
            /* empty */;
        4'h7:
            /* empty */;
        4'h8:
            /* empty */;
        4'h9:
            /* empty */;
        4'ha:
            /* empty */;
        4'hb:
            /* empty */;
        4'hc:
            /* empty */;
        4'hd:
            \$18  = write_data;
      endcase
    end
    if (rst) begin
      \$18  = 32'd0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$19  = \$signal$23 ;
    if (write_enable) begin
      casez (write_addr)
        4'h0:
            /* empty */;
        4'h1:
            /* empty */;
        4'h2:
            /* empty */;
        4'h3:
            /* empty */;
        4'h4:
            /* empty */;
        4'h5:
            /* empty */;
        4'h6:
            /* empty */;
        4'h7:
            /* empty */;
        4'h8:
            /* empty */;
        4'h9:
            /* empty */;
        4'ha:
            /* empty */;
        4'hb:
            /* empty */;
        4'hc:
            /* empty */;
        4'hd:
            /* empty */;
        4'he:
            \$19  = write_data;
      endcase
    end
    if (rst) begin
      \$19  = 32'd0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$20  = \$signal$24 ;
    if (write_enable) begin
      (* full_case = 32'd1 *)
      casez (write_addr)
        4'h0:
            /* empty */;
        4'h1:
            /* empty */;
        4'h2:
            /* empty */;
        4'h3:
            /* empty */;
        4'h4:
            /* empty */;
        4'h5:
            /* empty */;
        4'h6:
            /* empty */;
        4'h7:
            /* empty */;
        4'h8:
            /* empty */;
        4'h9:
            /* empty */;
        4'ha:
            /* empty */;
        4'hb:
            /* empty */;
        4'hc:
            /* empty */;
        4'hd:
            /* empty */;
        4'he:
            /* empty */;
        4'hf:
            \$20  = write_data;
      endcase
    end
    if (rst) begin
      \$20  = 32'd0;
    end
  end
endmodule


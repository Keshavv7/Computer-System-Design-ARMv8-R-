$comment Generated by Amaranth $end
$date 2024-10-26 11:08:08.530540 $end
$timescale 1 fs $end
$scope module bench $end
$scope module top $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var wire 32 # Instruction $end
$var wire 32 $ instruction_in $end
$scope module cpu $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var wire 32 # Instruction $end
$var wire 6 % u_ctrl $end
$var wire 32 & PC $end
$var wire 32 ' PCIn $end
$var wire 3 ( CPSR $end
$var wire 3 ) CPSR$6 $end
$var wire 32 * PCLine $end
$var wire 32 + PCOut $end
$var wire 32 , instruction $end
$var wire 2 - itype $end
$var wire 4 . read_addr1 $end
$var wire 4 / rm_addr $end
$var wire 32 0 rval $end
$var wire 32 1 read_data1 $end
$var wire 1 2 is_imm $end
$var wire 32 3 rval2 $end
$var wire 15 4 value $end
$var wire 4 5 read_addr2 $end
$var wire 32 6 read_data2 $end
$var wire 32 7 a $end
$var wire 32 8 b $end
$var wire 6 9 alu_ctrl $end
$var wire 6 : u_ctrl$24 $end
$var wire 32 ; write_data $end
$var wire 32 < o $end
$var wire 4 = write_addr $end
$var wire 4 > rd_addr $end
$var wire 32 ? write_data$29 $end
$var wire 32 @ DWriteLine $end
$var wire 32 A DAddr $end
$var wire 1 B DWEnable $end
$scope module alu $end
$var wire 32 7 a $end
$var wire 32 8 b $end
$var wire 6 9 alu_ctrl $end
$var wire 32 < o $end
$var wire 3 G nzc $end
$upscope $end
$scope module dec $end
$var wire 32 , instruction $end
$var wire 2 - itype $end
$var wire 4 / rm_addr $end
$var wire 1 2 is_imm $end
$var wire 15 4 value $end
$var wire 6 : u_ctrl $end
$var wire 4 > rd_addr $end
$upscope $end
$scope module pcc $end
$var wire 6 % u_ctrl $end
$var wire 32 ' PCIn $end
$var wire 3 ( CPSR $end
$var wire 32 + PCOut $end
$var wire 1 C N $end
$var wire 1 D Z $end
$var wire 32 E PCDef $end
$var wire 32 F target $end
$upscope $end
$scope module rf $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var wire 4 . read_addr1 $end
$var wire 32 1 read_data1 $end
$var wire 4 5 read_addr2 $end
$var wire 32 6 read_data2 $end
$var wire 4 = write_addr $end
$var wire 32 ? write_data $end
$var wire 32 H $signal $end
$var wire 32 I $signal$5 $end
$var wire 32 J $signal$6 $end
$var wire 32 K $signal$7 $end
$var wire 32 L $signal$8 $end
$var wire 32 M $signal$9 $end
$var wire 32 N $signal$10 $end
$var wire 32 O $signal$11 $end
$var wire 32 P $signal$12 $end
$var wire 32 Q $signal$13 $end
$var wire 32 R $signal$14 $end
$var wire 32 S $signal$15 $end
$var wire 32 T $signal$16 $end
$var wire 32 U $signal$17 $end
$var wire 32 V $signal$18 $end
$var wire 32 W $signal$19 $end
$var wire 1 X write_enable $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
0!
0"
b0 #
b0 $
b0 %
b0 &
b0 '
b0 (
b0 )
b0 *
b100 +
b0 ,
b0 -
b0 .
b0 /
b0 0
b0 1
02
b0 3
b0 4
b0 5
b0 6
b0 7
b0 8
b0 9
b0 :
b0 ;
b0 <
b0 =
b0 >
b0 ?
b0 @
b0 A
1B
0C
0D
b100 E
b0 F
b0 G
b0 H
b0 I
b0 J
b0 K
b0 L
b0 M
b0 N
b0 O
b0 P
b0 Q
b0 R
b0 S
b0 T
b0 U
b0 V
b0 W
0X
$end
#500000000
1!
b1000000000000000000000001 $
b100 &
b100 *
b1000000000000000000000001 #
b1000000000000000000000001 ,
b1 :
b1 4
#1000000000
0!
#1500000000
1!
b100 '
b1000 E
b1000 +
#2000000000
0!
#2500000000
1!
b1000 &
b1000 *
#3000000000
0!
#3500000000
1!
b1000 '
b1100 E
b1100 +
#4000000000
